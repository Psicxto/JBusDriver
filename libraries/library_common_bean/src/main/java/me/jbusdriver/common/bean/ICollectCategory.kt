/**
 * Why: 设计目的
 * `ICollectCategory` 接口的设计目的在于定义一个契约（Contract），用于标识那些可以被归类到某个收藏分类下的对象。
 * 在一个具有收藏功能的系统中，不同类型的可收藏项（例如，文章、图片、链接等）可能都需要与一个分类关联。
 * 通过定义这样一个通用接口，可以：
 * 1.  **实现多态**：任何实现了 `ICollectCategory` 接口的类的实例，都可以被视为一个“可归类的收藏品”，从而可以用统一的方式来处理它们的分类逻辑。
 * 2.  **强制约束**：它强制要求实现类必须提供一个 `categoryId` 属性，确保了分类信息的存在，避免了因缺少分类标识而导致的逻辑错误。
 * 3.  **解耦**：收藏管理的逻辑（如按分类筛选、移动收藏项到不同分类）可以依赖于这个抽象的接口，而不是具体的实现类。这降低了模块间的耦合度，使得系统更容易扩展，例如未来增加一种新的可收藏类型时，只需让它实现此接口即可，而无需修改已有的收藏管理代码。
 */

/**
 * What: 功效作用
 * 该接口的核心作用是为实现类提供一个标准的属性：
 * - `categoryId: Int`: 这是一个可读写的整型属性，用于存储或表示该对象所属的收藏分类的唯一标识符（ID）。
 *
 * 任何类实现了这个接口后，就表明其实例具有了“分类ID”这一特性，可以被收藏系统识别和管理。
 */

/**
 * How: 核心技术
 * 1.  **Kotlin 接口 (`interface`)**: 使用 Kotlin 的 `interface` 关键字定义了一个接口。与 Java 接口不同，Kotlin 接口可以包含抽象属性的声明。
 * 2.  **抽象属性 (`var categoryId: Int`)**: 接口中声明了一个名为 `categoryId` 的抽象属性。`var` 关键字表示这是一个可变属性，意味着实现类必须提供一个具有 getter 和 setter 的 `categoryId` 属性。接口本身不提供实现，具体的存储和读写逻辑由实现类负责。
 */
package me.jbusdriver.common.bean

interface ICollectCategory {
    var categoryId: Int
}

